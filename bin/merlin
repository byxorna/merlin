#!/usr/bin/env ruby

$:.unshift File.join File.dirname(__FILE__), *%w[.. lib]
require 'merlin'
require 'etcd'
require 'optparse'
require 'yaml'
require 'logger'
require 'colorize'
require 'eventmachine'

@options = {}
@defaults = {
  :mode => :watch,
  :config => '/etc/merlin/default.yaml',
  :daemonize => false,
  :etcd_server => 'localhost',
  :etcd_port => 4001,
  :file_watch => true,
  :log_level => Logger::INFO,
  :sev_colors => {
    'DEBUG' => {:color => :blue},
    'ERROR' => {:color => :red},
    'FATAL' => {:color => :black, :background => :red},
    'INFO'  => {:color => :cyan},
    'UNKNOWN' => {:color => :magenta},
    'WARN'    => {:color => :yellow}
  },
}

OptionParser.new do |opts|
  opts.on('-h','--help','Show help') { puts opts ; exit 0 }
  opts.on('-o','--oneshot','Run a single generation; dont watch for changes') {@options[:mode] = :oneshot}
  opts.on('-c','--config CONFIG',String,"Use templates config (Default: #{@defaults[:config]})"){|v| @options[:config] = v}
  opts.on('-w','--window SECONDS',Integer,"Coalesce events within window of SECONDS seconds (Default: false"){|v| @options[:coalesce] = v}
  opts.on('-d','--debug','Enable debugging'){ @options[:log_level] = Logger::DEBUG}
  opts.on('-e','--etcd SERVER[:PORT]',String,"Etcd server and optional port (Default #{@defaults[:etcd_server]}:#{@defaults[:etcd_port]})") do |v|
    host,port = v.split ':'
    @options[:etcd_server] = host
    @options[:etcd_port] = port unless port.nil?
  end
  opts.on('--[no-]filewatch',"Watch files on disk for changes while watching (Default: #{@defaults[:file_watch]})"){|v| @options[:file_watch] = v}
end.parse!

@options = @defaults.merge @options

begin
  @config = YAML.load_file @options[:config]
rescue => e
  abort "Unable to parse config #{@options[:config]}! #{e.message}"
end

# vet config is all present
default_config = {
  'statics' => {},
  'atomic' => false
}
# TODO add more logic about ensuring config is well formed
targets = @config.inject({}) do |memo,(k,v)|
  memo[k.to_sym] = default_config.merge v
  ['watch','templates','destination'].each do |config_setting|
    abort "Template #{k} is missing #{config_setting}!" if memo[k.to_sym][config_setting].nil?
  end
  abort "statics must be a Hash of source to destination for #{k}" unless memo[k.to_sym]['statics'].is_a? Hash
  memo
end

def new_logger progname
  Logger.new(STDOUT).tap do |l|
    l.progname = progname
    l.level = @options[:log_level]
    l.formatter = proc do |sev, time, progname, msg|
      #2014-11-01T16:35:20.123-04:00
      "#{time.strftime('%FT%T.%L%z')} [#{progname}] #{sev.colorize(@defaults[:sev_colors][sev] || {})}: #{msg}\n"
    end
  end
end
default_logger = new_logger "cli"

if @options[:mode] == :watch
  #TODO this should spawn a bunch of threads to watch?
  watchers = targets.inject({}) do |memo, (name, config)|
    logger = new_logger "#{name}:cli"
    logger.info "Creating emitter for #{name}"
    emitter = Merlin::Emitter.new(name, config['templates'], config['destination'],
      :check_cmd => config['check_cmd'],
      :commit_cmd => config['commit_cmd'],
      :statics => config['statics'],
      :atomic => config['atomic'],
      :logger => new_logger("#{name}:emitter"))
    # TODO figure out if the Etcd::Client is thread safe, or if we need a separate instace per emitter/watcher pair
    begin
      client = Etcd::Client.new(:host => @options[:etcd_server], :port => @options[:etcd_port])
    rescue => e
      logger.fatal "Unable to configure etcd client: #{e.message}"
      exit 1
    end
    watcher = Merlin::EtcdWatcher.new(client, config['watch'], :logger => new_logger("#{name}:etcd"))
    # this way we will trigger a watch immediately on startup
    emit_blk = proc do |data|
      begin
        emitter.emit data
      rescue => e
        logger.error "Error emitting configurations: #{e.message}"
        logger.error e.backtrace.join("\n")
      end
    end
    if @options[:coalesce]
      # lets coalesce calls to the emit block if we were asked to
      logger.info "Coalescing events within #{@options[:coalesce]} second windows"
      coalescer = Merlin::Coalescer.new @options[:coalesce], new_logger("#{name}:coalescer"), &emit_blk
    end
    get_emit_blk = proc do
      begin
        watcher.get do |data|
          if @options[:coalesce]
            coalescer.coalesce(data)
          else
            emit_blk.call(data)
          end
        end
      rescue => e
        logger.error "Error getting data from etcd at #{config['watch']}: #{e.message}"
        logger.error e.backtrace.join("\n")
      end
    end

    file_watchers = []
    if @options[:file_watch]
      file_logger = new_logger("#{name}:file")
      file_watchers = (config['statics'].keys + config['templates'].keys).map do |f|
        Merlin::FileWatcher.new(f, file_logger).observe(&get_emit_blk)
      end
    end

    logger.debug "Determining latest etcd index to observe from"
    d = watcher.get
    # lets trigger the emit block once with what we just fetched.
    # that way we will _always_ generate a config once. This makes sure that a config is generated
    # at startup even if the latest index under this path is less than the total etcd index.
    logger.info "Running initial emitter with data etcd index #{d.etcd_index} and modified index #{d.node.modified_index}"
    emit_blk.call(d)
    logger.debug "Starting etcd watcher at #{watcher.path} at wait index #{d.etcd_index}"
    watcher.observe d.etcd_index, &get_emit_blk

    memo[name] = {
      :get_emit_blk => get_emit_blk,
      :etcd => watcher,
      :coalescer => coalescer,
      :files => file_watchers
    }
    memo
  end
  Kernel.at_exit do
    watchers.each do |name,refs|
      default_logger.warn "Terminating watchers for #{name}"
      refs[:etcd].terminate
      refs[:files].each(&:stop)
    end
  end

  # ghetto event loop, just for handling signals (for now)
  # TODO maybe replace with event machine?
  events = []
  trap :USR1 do
    events << :USR1
  end
  trap :HUP do
    events << :HUP
  end
  EM.run do
    EM.add_periodic_timer(0.25) do
      unless events.empty?
        e = events.shift
        if [:HUP, :USR1].include? e
          default_logger.warn "Received reload request"
          watchers.each {|target,refs| refs[:get_emit_blk].call}
        else
          default_logger.warn "Received unknown event #{e}; ignoring"
        end
      end
      # every second, if we had a coalescer lets see if its ready to fire
      watchers.each {|_,refs| refs[:coalescer].fire unless refs[:coalescer].nil? }
    end
  end
else
  statuses = targets.map do |name, config|
    logger = new_logger "#{name}:cli"
    emitter = Merlin::Emitter.new(name, config['templates'], config['destination'],
      :check_cmd => config['check_cmd'],
      :commit_cmd => config['commit_cmd'],
      :statics => config['statics'],
      :atomic => config['atomic'],
      :logger => new_logger("#{name}:emitter"))
    begin
      client = Etcd::Client.new(:host => @options[:etcd_server], :port => @options[:etcd_port])
    rescue => e
      logger.fatal "Unable to configure etcd client: #{e.message}"
      exit 1
    end
    watcher = Merlin::EtcdWatcher.new(client, config['watch'], :logger => new_logger("#{name}:etcd"))
    [name,emitter.emit(watcher.get)]
  end
  statuses = Hash[statuses]
  if statuses.values.all?
    default_logger.info "All targets generated successfully"
  else
    statuses.each do |name,status|
      if status
        default_logger.info "#{name} generated successfully"
      else
        default_logger.warn "#{name} failed to generate"
      end
    end
    exit 1
  end
end
