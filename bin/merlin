#!/usr/bin/env ruby

$:.unshift File.join File.dirname(__FILE__), *%w[.. lib]
require 'merlin'
require 'etcd'
require 'optparse'
require 'yaml'

@options = {}
@defaults = {
  :mode => :watch,
  :config => '/etc/merlin/default.yaml',
  :debug => false,
  :daemonize => false,
  :etcd_server => 'localhost',
  :etcd_port => 4001
}

OptionParser.new do |opts|
  opts.on('-h','--help','Show help') { puts opts ; exit 0 }
  opts.on('-o','--oneshot','Run a single generation; dont watch for changes') {@options[:mode] = :oneshot}
  opts.on('-c','--config CONFIG',String,"Use config (Default: #{@defaults[:config]})"){|v| @options[:config] = v}
  opts.on('-d','--debug','Enable debugging'){ @options[:debug] = true}
  opts.on('-D','--daemonize','Daemonize process'){ @options[:daemonize] = true}
  opts.on('-e','--etcd SERVER[:PORT]',String,"Etcd server and optional port (Default #{@defaults[:etcd_server]}:#{@defaults[:etcd_port]})") do |v|
    host,port = v.split ':'
    @options[:etcd_server] = host
    @options[:etcd_port] = port unless port.nil?
  end
end.parse!

@options = @defaults.merge @options
puts @options.inspect

begin
  @config = YAML.load_file @options[:config]
rescue => e
  abort "Unable to parse config #{@options[:config]}! #{e.message}"
end

# vet config is all present
default_config = {
  'static' => []
}
# TODO add more logic about ensuring config is well formed
targets = @config.inject({}) do |memo,(k,v)|
  memo[k.to_sym] = default_config.merge v
  ['watch','templates','destination'].each do |config_setting|
    abort "Template #{k} is missing #{config_setting}!" if memo[k.to_sym][config_setting].nil?
  end
  memo
end

if @options[:mode] == :watch
  #TODO this should spawn a bunch of threads to watch?
  watchers = targets.map do |name, config|
    emitter = Merlin::Emitter.new(name, config['templates'], config['destination'], config['check_cmd'], config['commit_cmd'])
    begin
      client = Etcd::Client.new(:host => @options[:etcd_server], :port => @options[:etcd_port])
    rescue => e
      abort "Unable to configure etcd client: #{e.message}"
    end
    watcher = Merlin::EtcdWatcher.new(name, client, config['watch'])
    watcher.observe do |val|
      #TODO need better error handling around observer
      watcher.get do |data|
        emitter.emit data
      end
    end
  end
  Kernel.at_exit do
    puts "terminating watchers"
    watchers.each(&:terminate)
  end
  sleep
else
  targets.each do |name, config|
    emitter = Merlin::Emitter.new(name, config['templates'], config['destination'], config['check_cmd'], config['commit_cmd'])
    begin
      client = Etcd::Client.new(:host => @options[:etcd_server], :port => @options[:etcd_port])
    rescue => e
      abort "Unable to configure etcd client: #{e.message}"
    end
    watcher = Merlin::EtcdWatcher.new(name, client, config['watch'])
    emitter.emit watcher.get
  end
end
